buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
	}
}



apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'java-library'

group = 'com.bertramlabs.plugins'


repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	implementation "org.codehaus.groovy:groovy-all:$groovyVersion"
	api project(':karman-core')
	testImplementation "org.spockframework:spock-core:$spockVersion"

	api "eu.agno3.jcifs:jcifs-ng:2.1.7"
	api group:'commons-beanutils', name:'commons-beanutils', version:'1.9.3'
}

publishing {
	publications {
		maven(MavenPublication) {
			artifactId 'karman-cifs'
			pom.withXml {
				asNode().children().last() + {
					resolveStrategy = Closure.DELEGATE_FIRST
					name 'karman-cifs'
					description 'Karman Storage Provider interface for CIFS (Samba) File Shares'
					url 'https://github.com/bertramdev/karman-core'
					scm {
						url 'https://github.com/bertramdev/karman-core'
						connection 'scm:https://bertramdev@github.com/bertramdev/karman-core.git'
						developerConnection 'scm:git://github.com/bertramdev/karman-core.git'
					}
					licenses {
						license {
							name 'The Apache Software License, Version 2.0'
							url 'http://www.apache.org/license/LICENSE-2.0.txt'
							distribution 'repo'
						}
					}
					developers {
						developer {
							id 'davydotcom'
							name 'David Estes'
							email 'davydotcom@gmail.com'
						}
						developer {
							id 'bwheeler'
							name 'Brian Wheeler'
							email 'bwheeler@bcap.com'
						}
					}
				}
			}
			from components.java
		}
	}
	repositories {
        maven {
            if( !isReleaseVersion ) {
                url = "http://nexus.bertramlabs.com/content/repositories/snapshots"
                if(project.hasProperty('labsNexusUser')) {
                    credentials {
                        username = labsNexusUser
                        password = labsNexusPassword
                    }
                }
            }
        }
    }
}


java {
    withSourcesJar()
    withJavadocJar()
}

task(console, dependsOn: 'classes', type: JavaExec) {
	main = 'groovy.ui.Console'
	classpath = sourceSets.main.runtimeClasspath
}

test {
	systemProperties System.properties
	testLogging {
		exceptionFormat = 'full'
		showStandardStreams = true
	}
}

