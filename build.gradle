buildscript {
    repositories {
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "io.github.gradle-nexus:publish-plugin:1.0.0"
    }
}


plugins {
    id 'signing'
}

ext {
    isBuildSnapshot = version.endsWith('-SNAPSHOT')
    isReleaseVersion = !isBuildSnapshot
}

group = 'com.bertramlabs.plugins'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven-publish'


if (isReleaseVersion) {
    apply plugin: "io.github.gradle-nexus.publish-plugin"
    nexusPublishing {
        repositories {
            sonatype {
                if(project.hasProperty('mavenUser')) {
                    username = mavenUser
                    password = mavenPassword
                }   
            }
        }
    }
} else {
	
    publishing {
        repositories {
            maven {
                url = "http://nexus.bertramlabs.com/content/repositories/snapshots"
                if(project.hasProperty('labsNexusUser')) {
                    credentials {
                        username = labsNexusUser
                        password = labsNexusPassword
                    }
                }
            }
        }
    }
}

subprojects { project ->
    sourceCompatibility = '1.11'
    targetCompatibility = '1.11'
    java {
        sourceCompatibility = JavaVersion.toVersion('1.11')
        targetCompatibility = JavaVersion.toVersion('1.11')
    }
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    afterEvaluate {
        signing {
            required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
            sign publishing.publications.maven
        }
    }

    tasks.withType(Sign) {
        onlyIf { isReleaseVersion }
    }

    tasks.withType(AbstractPublishToMaven).configureEach {
          def signingTasks = tasks.withType(Sign)
          mustRunAfter(signingTasks)
        }

    //do not generate extra load on Nexus with new staging repository if signing fails
    tasks.withType(io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository).configureEach {
        shouldRunAfter(tasks.withType(Sign))
    }
    
    
}


repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	
    implementation 'commons-logging:commons-logging:1.1.1'
    testImplementation "org.codehaus.groovy:groovy-all:$groovyVersion"
    testImplementation "org.spockframework:spock-core:$spockVersion"
}

test {
	testLogging {
		exceptionFormat = 'full'
		showStandardStreams = true
	}
}
tasks.withType(JavaExec) {
  // Assign all Java system properties from
  // the command line to the JavaExec task.
  systemProperties System.properties
}

